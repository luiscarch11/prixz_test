// Mocks generated by Mockito 5.3.0 from annotations
// in prixz_test/test/book/presentation/book_search_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:prixz_test/core/core.dart' as _i2;
import 'package:prixz_test/shared/domain/email/email.dart' as _i7;
import 'package:prixz_test/shared/domain/person_name_or_surname/person_name_or_surname.dart'
    as _i6;
import 'package:prixz_test/user/domain/fetch_user_failure.dart' as _i10;
import 'package:prixz_test/user/domain/gender.dart' as _i9;
import 'package:prixz_test/user/domain/phone_number/phone_number.dart' as _i8;
import 'package:prixz_test/user/domain/save_user_failure.dart' as _i5;
import 'package:prixz_test/user/domain/user.dart' as _i11;
import 'package:prixz_test/user/domain/user_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResultOr_0<F> extends _i1.SmartFake implements _i2.ResultOr<F> {
  _FakeResultOr_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeResource_1<F, T> extends _i1.SmartFake
    implements _i2.Resource<F, T> {
  _FakeResource_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ResultOr<_i5.SaveUserFailure>> saveUser(
          _i6.PersonNameOrSurname? name,
          _i6.PersonNameOrSurname? surname,
          _i7.Email? email,
          _i8.PhoneNumber? phoneNumber,
          DateTime? birthDay,
          _i9.Gender? gender) =>
      (super.noSuchMethod(Invocation.method(#saveUser, [name, surname, email, phoneNumber, birthDay, gender]),
              returnValue: _i4.Future<_i2.ResultOr<_i5.SaveUserFailure>>.value(
                  _FakeResultOr_0<_i5.SaveUserFailure>(
                      this,
                      Invocation.method(
                          #saveUser, [name, surname, email, phoneNumber, birthDay, gender]))))
          as _i4.Future<_i2.ResultOr<_i5.SaveUserFailure>>);
  @override
  _i2.Resource<_i10.FetchUserFailure, _i11.User?> fetchUser() =>
      (super.noSuchMethod(Invocation.method(#fetchUser, []),
              returnValue: _FakeResource_1<_i10.FetchUserFailure, _i11.User?>(
                  this, Invocation.method(#fetchUser, [])))
          as _i2.Resource<_i10.FetchUserFailure, _i11.User?>);
}
